maven:
    - manage the jars needed for spring dev; 
    - it automatically downloads the jar files
    - add jars needed in pom.xml <dependency> tag
    - command line use:
        - mvn archetype:generate
        - mvn compile

spring:
    - dependency injection
    - bean scope
        - by default, bean scope is singleton
        - to change the scope, add attribute scope = "prototype"

    - init and destroy method
        - init-method="onCreate"
        - destroy-method="onDestroy"
        - can specify default init and destroy methods in <beans>,
        but it will be overridden by the init/destroy method in <bean>

    - factory method
        - static method used in the bean itself
        - non static method used with a factory bean

    - pass in constructor a list
        - <constructor-arg name = "">
            <list>
            <value> a </value>
            <value> n </value>
            </list>
         </constructor-arg>
    - manage a list of objects
        <list>
            <ref bean=""/>
        </list>
    - manage a map in property
        <property  name="">
            <props>
                <prop key ="keyval"> "value"</prop>
            </props>
        </property>
     more general:
        <property  name="">
            <map>
                <entry key ="keyval" value:ref ="refbean"></>
            </map>
        </property>

===================================================================================
  Spring
    - autowire
        uses the setter method to initialize instance vars (only references)
        - byType (wont work well with interfaces/super class; have to be specific about type)
        - byName (instance var name matches id of the bean)
        - constructor
            class Class {
                SubClassOne one;
                SubClassTwo two;
                Class (SubClassOne one, SubClassTwo two) {
                }
            }
            you can use "constructor" to initialize the fields but the type has to be specific

        byType and byName are property autowire
        you can not property and constructor autowire at the same time

        to make the autowire global, do default-autowire= " " in <beans>; When autowire "byType",
        to avoid ambiguity when two beans are created out of one type, specify default beans in "default-autowire-candidate",
        so that when there is ambiguity, only beans that are not in the list will be filtered out.
        ; another way to achieve this is to set specific beans autowire-candidate = "false", or primary ="true"

    - ***wiring with annotation for "byType"
        @Autowired before instance reference or setter method
        this can be used to mix property and constructor, and it does not even need
        to have the setter method
        (required=false) to make the bean optional for setting insatnce var

        -qualifier to the bean
        when there are multiple classes that implement one interface, but only one bean/class that is desired,
        then you can add qualifier to the bean/class:

        <qualifier value ="q"></qualifier>

        @Qualify ("q")
        class A {
        }
        and then, add @qualifier("q") under @autowired

        -@resource  can also help limnit to the bean, by having
        @resource (byType)
        @resource (name = "id") (byName)

        -@inject
        @named(vlaue ="id")

    - @PreDestroy @PostConstruct
    @PreDestory wont get called if the bean is prototype

    - automatic beans discovery
        - context:component-scan
        - add @component to each class that wants to be treated as a bean
        - @Value() to set default value
            - void set(@Value("1") int i) {
                this.i = i;
            }
            this is the same as setting property value in xml










==============================================================
MySQL and Spring

*JDBC
*DBCP

1.JdbcTemplate where no parameters is supplied
2.NamedParameterJdbcTemplate (where value is passed in as parameters for safety):
    namedParameters:
        1.BeanPropertySQLParameterSource
          the bean properties need to have getter and setter method
        2.MapSqlParameterSource

PreparedStatements (batch update)
batchUpdate: update for each object in the list
    we could loop through the object list, and create each bean for the object, and then update
    but better way is to create batch parameters:
        SqlParameterSource[] params = SqlParameterSourceUtils.createBatch(objects.toArray());
        // here the params is a list of param for each object which we will update
        // both MapSqlParameterSource and BeanPropertySqlParameterSource implement SqlParameterSource
        then we do batch update:
        namedJdbc.batchUpdate("sql string here", params);

transaction
used in batch change queries: if one update fails, the the whole update query will fail; the previously succeeded
tx namespace enables support for transaction management in Spring framework
add tx namespace when using transaction

	<bean id="jdbcTransactionManager"
		  class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

transaction uses the transaction manager in spring jdbc which takes in the datasource created through connection initialziation
adding tag @Transactional to make the method with transaction



tomcat:
    java server for web development


Spring MVC 
